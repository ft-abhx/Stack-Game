class gamecontroller {
  field int level;
  field RowChange mover;
  field Stack stack;
  field boolean play;

  constructor gamecontroller new() {
    let level = 0;
    let mover = RowChange.new();
    let stack = Stack.new();
    let play = true;
    return this;
  }

  method void run() {
    var char key;
    var int blocks;
    var String levelStr;
    let levelStr = String.new(2);
    do Draw.grid();
    do Output.moveCursor(21, 27);
    do Output.printString("STACK GAME");

    while (play) {
      do levelStr.setInt(level + 1);
      do Output.moveCursor(1, 1);
      do Output.printString("Level: ");
      do Output.printString(levelStr);
      do Output.printString("/");
      do Output.printInt(Constants.LEVELS());

      while (~(key = Constants.KEY_SPACE())) {
        let key = Keyboard.keyPressed();
        do mover.move();
        do Draw.row(mover.getRow(), level);
      }

      while (key = Constants.KEY_SPACE()) {
        let blocks = stack.add(mover.getRow(), level);
        do Draw.row(stack.getRow(level), level);

        do gameState(blocks);
        let key = 0;
        do Sys.wait(1000);
      }
    }
    return;
  }

  method void gameState(int blocks) {
    if (blocks = 0) {
      let play = false;
      do Output.moveCursor(3, 1);
      do Output.printString("Better Luck Next Time!");
      do Sys.wait(2000);
    } else {
      if (level = 14) {
        let play = false;
        do Output.moveCursor(3, 1);
        do Output.printString("Congrats! You Win!");
        do Sys.wait(2000);
      } else {
        let play = true;
        let level = level + 1;
        do mover.setLevel(level, blocks);
      }
    }
    return;
  }

  method void dispose() {
    do mover.dispose();
    do stack.dispose();
    do Memory.deAlloc(this);
    return;
  }
}